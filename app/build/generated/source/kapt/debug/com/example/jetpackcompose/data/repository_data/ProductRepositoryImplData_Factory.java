// Generated by Dagger (https://dagger.dev).
package com.example.jetpackcompose.data.repository_data;

import android.app.Application;
import com.example.jetpackcompose.data.remote.ProductApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class ProductRepositoryImplData_Factory implements Factory<ProductRepositoryImplData> {
  private final Provider<ProductApi> productApiProvider;

  private final Provider<Application> appProvider;

  public ProductRepositoryImplData_Factory(Provider<ProductApi> productApiProvider,
      Provider<Application> appProvider) {
    this.productApiProvider = productApiProvider;
    this.appProvider = appProvider;
  }

  @Override
  public ProductRepositoryImplData get() {
    return newInstance(productApiProvider.get(), appProvider.get());
  }

  public static ProductRepositoryImplData_Factory create(Provider<ProductApi> productApiProvider,
      Provider<Application> appProvider) {
    return new ProductRepositoryImplData_Factory(productApiProvider, appProvider);
  }

  public static ProductRepositoryImplData newInstance(ProductApi productApi, Application app) {
    return new ProductRepositoryImplData(productApi, app);
  }
}
